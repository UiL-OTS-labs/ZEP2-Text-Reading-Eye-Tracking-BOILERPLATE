/******************************************************************************\
FILE:           reading.zp
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Text Reading

For more information on the reading task see readme.txt in the
test folder.


Global structure of experiment:

  - welcome

  - phase 1 (see subfolder test)

  - thankyou


HISTORY:
2013-07-03 TV   Created.
2013-07-03 MD   Major overhaul to generate stimuli much easier now there is
                support for multiple lists.

\******************************************************************************/

requires 1.16;

// use std_window1a for the smi eyetracker.
import std_windows1;
//import std_windows1a;
import std_texts_en;
import std_entry_page1;
import std_exit_page1;
import std_pause_page;
import std_blank_page;

import test::task;
import test::generate_objects;

Experiment experiment
{
    on_event:entry()
    {
        show_test_windows();

        // In the eyetracking lab.
        control.button_box.open();

        // In the baby eyetracking lab one has to select the beexybox
        // by serial number, and then the following is more appropriate.
        //
        // Make sure the serial number is correct here B15007
        // (Check on bottom of device)

        // control.button_box.open(BXY_DEVICE_TYPE_B, "B15007");

        // If the button box isn't open, terminate before calibration etc.
        if (!control.button_box.is_open)
            terminate "Unable to open BeexyBox.\n";

        control.button_box.enable_all_buttons(CONTINUE);
    }

    on_event:exit()
    {
        control.button_box.close();
        terminate;
    }

    on_event:message()
    {
        // On Ctrl+F4 jump unconditionally to the thank-you part.
        if (message_sender == control && message_arg == SYS_STOP)
        {
            control.mark_experiment_aborted();
            thankyou.enter();
        }
    }

    // Decides whether to start te task or generate the
    // objects and png
    TransientPart decide_generate
    {
        on_event:entry()
        {
            if (generate_object_info)
                generate_objs.enter();
            else
                welcome.enter();
        }
    }

    // if commandline option --generate is present all objects
    // and png's are generated for all lists.
    Part generate_objs
    {
        on_event:entry()
        {
            if (generate_object_info)
            {
                test::generate(this);
            }
        }

        on_event:exit()
        {
            if (generate_object_info)
            {
                test::object_info_save();
                control.mark_experiment_aborted();
                terminate;
            }
        }
    }

    Part welcome
    {
        on_event:entry()
        {
            entry_page.set_text(WELCOME_TEXT);
            entry_page.action(this, 0s);
        }
    }


    Part phase1
    {
        on_event:entry()
        {
            test::action(this);
        }
    }


    Part thankyou
    {
        on_event:entry()
        {
            control.end_experiment();   // Check-in session.

            exit_page.set_text(THANK_YOU_TEXT);
            exit_page.action(this, 10s);
        }


        on_event:exit()
        {
            // We're closing. Retrieve eye-movement data file recorded.
            test::eyetracker.retrieve_data_files();

            // Save object information (when in object info generation mode).
            test::object_info_save();
        }
    }
}
